name: Build

on:
  push:
    branches:
      - main
    tags:
      - "v*"

  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build source distribution (sdist)
        run: pipx run build --sdist

      - name: Upload source distribution as artifact
        uses: actions/upload-artifact@v3
        with:
          name: tadlibcint-sdist
          path: dist/*.tar.gz

  wheel:
    runs-on: ubuntu-latest
    container: condaforge/linux-anvil-cos7-x86_64
    strategy:
      fail-fast: false
      matrix:
        python: ['3.8', '3.9', '3.10', '3.11']

    defaults:
      run:
        shell: ${{ matrix.shell || 'bash -l {0}' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Checkout submodules
        run: git submodule update --init --recursive

      - name: Create environment
        run: >-
          mamba create -n wheel-${{ matrix.python }}
          --yes
          python=${{ matrix.python }}
          auditwheel
          c-compiler
          cxx-compiler
          fortran-compiler
          cffi
          cmake
          git
          meson
          numpy
          pip
          python-build
          pkgconfig
          patchelf
          unzip
          wheel

      - name: Build wheel (bdist)
        run: |
          conda activate wheel-${{ matrix.python }}
          set -ex
          python -m build --wheel
          auditwheel show dist/*.whl
          auditwheel repair -w wheels --plat ${{ env.plat }} dist/*.whl
        env:
          plat: manylinux${{ matrix.python == '3.6' && '2010' || '_2_12' }}_x86_64

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v3
        with:
          name: tadlibcint-wheel-${{ matrix.python }}
          path: wheels/*.whl


  upload_pypi:
    needs: [wheel, sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
